{
  "strategy": "zero_shot",
  "prompt_prefix": "create table person (\n    person_id integer primary key,\n    name varchar(20) not null\n);\n\ncreate table phone (\n    phone_id integer primary key,\n    person_id integer not null,\n    area_code int not null,\n    number int not null,\n    can_recieve_sms tinyint not null,\n    foreign key (person_id) references person (person_id)\n);\n\ncreate table address (\n    address_id integer primary key,\n    person_id integer not null,\n    street varchar(50),\n    zip integer not null\n);\n\ncreate table zip (\n    zip integer primary key,\n    city varchar(35),\n    state_two_letter_code char(2)\n);\n\ncreate table dog (\n    dog_id integer primary key,\n    name varchar(35),\n    breed varchar(35),\n    birth_date date\n);\n\ncreate table award (\n    award_id integer primary key,\n    dog_id integer not null,\n    event_date date,\n    award_name varchar(25) not null,\n    foreign key (dog_id) references dog (dog_id)\n);\n\ncreate table person_dog (\n    dog_id integer,\n    person_id integer,\n    foreign key (dog_id) references dog (dog_id),\n    foreign key (person_id) references person (person_id)\n); Give me a sqlite select statement that answers the question. Only respond with sqlite syntax. If there is an error do not expalin it!",
  "questionResults": [
    {
      "question": "Which are the most awarded dogs?",
      "sql": "\nSELECT dog.name, COUNT(award.award_id) AS TotalAwards\nFROM dog\nJOIN award ON dog.dog_id = award.dog_id\nGROUP BY dog.dog_id\nORDER BY TotalAwards DESC;\n",
      "queryRawResponse": "[('Buddy', 2), ('Bella', 1)]",
      "friendlyResponse": "The most awarded dogs are Buddy with 2 awards and Bella with 1 award.",
      "error": "None"
    },
    {
      "question": "Which dogs have multiple owners?",
      "sql": "\nSELECT d.name, COUNT(pd.person_id) AS num_owners\nFROM dog d\nJOIN person_dog pd ON d.dog_id = pd.dog_id\nGROUP BY d.dog_id\nHAVING COUNT(pd.person_id) > 1;\n",
      "queryRawResponse": "[('Rufus', 2), ('Rex', 2)]",
      "friendlyResponse": "Rufus and Rex each have two owners.",
      "error": "None"
    },
    {
      "question": "Which people have multiple dogs?",
      "sql": "\nSELECT person.person_id, person.name\nFROM person\nJOIN person_dog ON person.person_id = person_dog.person_id\nGROUP BY person.person_id, person.name\nHAVING COUNT(person_dog.dog_id) > 1;\n",
      "queryRawResponse": "[(1, 'Laura Stevenson'), (5, 'Sydney Smith')]",
      "friendlyResponse": "Laura Stevenson and Sydney Smith both have multiple dogs.",
      "error": "None"
    },
    {
      "question": "What are the top 3 cities represented?",
      "sql": "\nSELECT z.city, COUNT(*) as number_of_people\nFROM address a\nJOIN zip z ON a.zip = z.zip\nGROUP BY z.city\nORDER BY number_of_people DESC\nLIMIT 3;\n",
      "queryRawResponse": "[('Provo', 3), ('Washington', 1), ('New York', 1)]",
      "friendlyResponse": "The top 3 cities represented are Provo with 3 representations, Washington with 1, and New York with 1.",
      "error": "None"
    },
    {
      "question": "What are the names and cities of the dogs who have awards?",
      "sql": "\nSELECT dog.name AS dog_name, zip.city AS city\nFROM dog\nJOIN award ON dog.dog_id = award.dog_id\nJOIN person_dog ON dog.dog_id = person_dog.dog_id\nJOIN person ON person_dog.person_id = person.person_id\nJOIN address ON person.person_id = address.person_id\nJOIN zip ON address.zip = zip.zip;\n",
      "queryRawResponse": "[('Buddy', 'New York'), ('Buddy', 'New York'), ('Bella', 'Washington')]",
      "friendlyResponse": "Buddy from New York and Bella from Washington are dogs that have received awards.",
      "error": "None"
    },
    {
      "question": "Who has more than one phone number?",
      "sql": "\nSELECT p.person_id, p.name\nFROM person p\nJOIN phone ph ON p.person_id = ph.person_id\nGROUP BY p.person_id, p.name\nHAVING COUNT(ph.phone_id) > 1;\n",
      "queryRawResponse": "[(3, 'Charlie Brown')]",
      "friendlyResponse": "Charlie Brown has more than one phone number.",
      "error": "None"
    },
    {
      "question": "Who doesn't have a way for us to text them?",
      "sql": "\nSELECT p.person_id, p.name\nFROM person p\nLEFT JOIN phone ph ON p.person_id = ph.person_id\nWHERE ph.can_recieve_sms = 0 OR ph.phone_id IS NULL;\n",
      "queryRawResponse": "[(2, 'Bob Jones'), (3, 'Charlie Brown'), (4, 'Jimmy Hendricks'), (5, 'Sydney Smith'), (6, 'Jordan Malone')]",
      "friendlyResponse": "Sure, the people who don't have a way for you to text them are Bob Jones, Charlie Brown, Jimmy Hendricks, Sydney Smith, and Jordan Malone.",
      "error": "None"
    },
    {
      "question": "Will we have a problem texting any of the previous award winners?",
      "sql": "\nSELECT name, can_recieve_sms\nFROM person\nJOIN person_dog ON person.person_id = person_dog.person_id\nJOIN dog ON person_dog.dog_id = dog.dog_id\nJOIN award ON dog.dog_id = award.dog_id\nJOIN phone ON person.person_id = phone.person_id\nWHERE can_recieve_sms = 0;\n",
      "queryRawResponse": "[(2, 'Bob Jones'), (3, 'Charlie Brown'), (4, 'Jimmy Hendricks'), (5, 'Sydney Smith'), (6, 'Jordan Malone')]",
      "friendlyResponse": "Sure, the people who don't have a way for you to text them are Bob Jones, Charlie Brown, Jimmy Hendricks, Sydney Smith, and Jordan Malone.",
      "error": "ambiguous column name: name"
    }
  ]
}