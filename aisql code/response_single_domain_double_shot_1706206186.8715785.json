{
  "strategy": "single_domain_double_shot",
  "prompt_prefix": "create table person (\n    person_id integer primary key,\n    name varchar(20) not null\n);\n\ncreate table phone (\n    phone_id integer primary key,\n    person_id integer not null,\n    area_code int not null,\n    number int not null,\n    can_recieve_sms tinyint not null,\n    foreign key (person_id) references person (person_id)\n);\n\ncreate table address (\n    address_id integer primary key,\n    person_id integer not null,\n    street varchar(50),\n    zip integer not null\n);\n\ncreate table zip (\n    zip integer primary key,\n    city varchar(35),\n    state_two_letter_code char(2)\n);\n\ncreate table dog (\n    dog_id integer primary key,\n    name varchar(35),\n    breed varchar(35),\n    birth_date date\n);\n\ncreate table award (\n    award_id integer primary key,\n    dog_id integer not null,\n    event_date date,\n    award_name varchar(25) not null,\n    foreign key (dog_id) references dog (dog_id)\n);\n\ncreate table person_dog (\n    dog_id integer,\n    person_id integer,\n    foreign key (dog_id) references dog (dog_id),\n    foreign key (person_id) references person (person_id)\n); Who doesn't have a way for us to text them?  \nSELECT p.person_id, p.name\nFROM person p\nLEFT JOIN phone ph ON p.person_id = ph.person_id AND ph.can_recieve_sms = 1\nWHERE ph.phone_id IS NULL;\n  Give me a sqlite select statement that answers the question. Only respond with sqlite syntax. If there is an error do not expalin it!",
  "questionResults": [
    {
      "question": "Which are the most awarded dogs?",
      "sql": "\nSELECT d.name, COUNT(a.award_id) AS award_count\nFROM dog d\nJOIN award a ON d.dog_id = a.dog_id\nGROUP BY d.dog_id\nORDER BY award_count DESC;\n",
      "queryRawResponse": "[('Buddy', 2), ('Bella', 1)]",
      "friendlyResponse": "The most awarded dogs are Buddy with 2 awards and Bella with 1 award.",
      "error": "None"
    },
    {
      "question": "Which dogs have multiple owners?",
      "sql": "\nSELECT d.dog_id, d.name\nFROM dog d\nJOIN person_dog pd ON d.dog_id = pd.dog_id\nGROUP BY d.dog_id\nHAVING COUNT(pd.person_id) > 1;\n",
      "queryRawResponse": "[(4, 'Rufus'), (5, 'Rex')]",
      "friendlyResponse": "Rufus and Rex are the dogs that have multiple owners.",
      "error": "None"
    },
    {
      "question": "Which people have multiple dogs?",
      "sql": "\nSELECT p.person_id, p.name\nFROM person p\nJOIN person_dog pd ON p.person_id = pd.person_id\nGROUP BY p.person_id, p.name\nHAVING COUNT(pd.dog_id) > 1;\n",
      "queryRawResponse": "[(1, 'Laura Stevenson'), (5, 'Sydney Smith')]",
      "friendlyResponse": "Laura Stevenson and Sydney Smith both have multiple dogs.",
      "error": "None"
    },
    {
      "question": "What are the top 3 cities represented?",
      "sql": "\nSELECT z.city, COUNT(*) AS num_people\nFROM address a\nJOIN zip z ON a.zip = z.zip\nGROUP BY z.city\nORDER BY num_people DESC\nLIMIT 3;\n",
      "queryRawResponse": "[('Provo', 3), ('Washington', 1), ('New York', 1)]",
      "friendlyResponse": "The top three cities represented are Provo with 3 representatives, followed by Washington and New York, each with 1 representative.",
      "error": "None"
    },
    {
      "question": "What are the names and cities of the dogs who have awards?",
      "sql": "SELECT d.name, z.city\nFROM dog d\nJOIN award a ON d.dog_id = a.dog_id\nJOIN person_dog pd ON d.dog_id = pd.dog_id\nJOIN address ad ON pd.person_id = ad.person_id\nJOIN zip z ON ad.zip = z.zip;",
      "queryRawResponse": "[('Buddy', 'New York'), ('Buddy', 'New York'), ('Bella', 'Washington')]",
      "friendlyResponse": "Buddy from New York and Bella from Washington are dogs that have received awards.",
      "error": "None"
    },
    {
      "question": "Who has more than one phone number?",
      "sql": "\nSELECT p.person_id, p.name\nFROM person p\nJOIN (\n  SELECT person_id\n  FROM phone\n  GROUP BY person_id\n  HAVING COUNT(phone_id) > 1\n) AS multiple_phones\nON p.person_id = multiple_phones.person_id;\n",
      "queryRawResponse": "[(3, 'Charlie Brown')]",
      "friendlyResponse": "Charlie Brown has more than one phone number.",
      "error": "None"
    },
    {
      "question": "Who doesn't have a way for us to text them?",
      "sql": "\nSELECT p.person_id, p.name\nFROM person p\nLEFT JOIN phone ph ON p.person_id = ph.person_id\nWHERE ph.can_recieve_sms = 0 OR ph.phone_id IS NULL;\n",
      "queryRawResponse": "[(2, 'Bob Jones'), (3, 'Charlie Brown'), (4, 'Jimmy Hendricks'), (5, 'Sydney Smith'), (6, 'Jordan Malone')]",
      "friendlyResponse": "Bob Jones, Charlie Brown, Jimmy Hendricks, Sydney Smith, and Jordan Malone don't have a way for us to text them.",
      "error": "None"
    },
    {
      "question": "Will we have a problem texting any of the previous award winners?",
      "sql": "SELECT DISTINCT p.person_id, p.name\nFROM person p\nJOIN person_dog pd ON p.person_id = pd.person_id\nJOIN dog d ON pd.dog_id = d.dog_id\nJOIN award a ON d.dog_id = a.dog_id\nLEFT JOIN phone ph ON p.person_id = ph.person_id AND ph.can_recieve_sms = 1\nWHERE ph.phone_id IS NULL;",
      "queryRawResponse": "[(2, 'Bob Jones')]",
      "friendlyResponse": "No problem, you won't have issues texting Bob Jones.",
      "error": "None"
    }
  ]
}