{
  "strategy": "zero_shot",
  "prompt_prefix": "-- create table person (\n--     person_id integer primary key,\n--     name varchar(20) not null\n-- );\n\n-- create table phone (\n--     phone_id integer primary key,\n--     person_id integer not null,\n--     area_code int not null,\n--     number int not null,\n--     can_recieve_sms tinyint not null,\n--     foreign key (person_id) references person (person_id)\n-- );\n\n-- create table address (\n--     address_id integer primary key,\n--     person_id integer not null,\n--     street varchar(50),\n--     zip integer not null\n-- );\n\n-- create table zip (\n--     zip integer primary key,\n--     city varchar(35),\n--     state_two_letter_code char(2)\n-- );\n\n-- create table dog (\n--     dog_id integer primary key,\n--     name varchar(35),\n--     breed varchar(35),\n--     birth_date date\n-- );\n\n-- create table award (\n--     award_id integer primary key,\n--     dog_id integer not null,\n--     event_date date,\n--     award_name varchar(25) not null,\n--     foreign key (dog_id) references dog (dog_id)\n-- );\n\n-- create table person_dog (\n--     dog_id integer,\n--     person_id integer,\n--     foreign key (dog_id) references dog (dog_id),\n--     foreign key (person_id) references person (person_id)\n-- );\n\n--MySQL\n\n-- DROP SCHEMA IF EXISTS vending;\n-- CREATE SCHEMA vending;\n-- USE vending;\n\n-- CREATE TABLE Locations (\n--   id integer PRIMARY KEY NOT NULL AUTO_INCREMENT,\n--   location varchar(255) NOT NULL,\n--   total_earnings decimal(9,2),\n--   recent_earnings decimal(9,2)\n-- );\n\n-- CREATE TABLE Machines (\n--   id integer PRIMARY KEY NOT NULL AUTO_INCREMENT,\n--   location_id integer NOT NULL,\n--   total_earnings decimal(9,2),\n--   recent_earnings decimal(9,2),\n--   FOREIGN KEY (location_id) REFERENCES Locations (id)\n-- );\n\n-- CREATE TABLE Products (\n--   id integer PRIMARY KEY NOT NULL AUTO_INCREMENT,\n--   cost decimal(9,2) NOT NULL,\n--   price decimal(9,2) NOT NULL\n-- );\n\n-- CREATE TABLE Inventory (\n--   machine_id integer,\n--   product_id integer,\n--   items_left integer,\n--   FOREIGN KEY (machine_id) REFERENCES Machines (id),\n--   FOREIGN KEY (product_id) REFERENCES Products (id)\n-- );\n\n-- CREATE TABLE Transactions (\n--   id integer PRIMARY KEY AUTO_INCREMENT,\n--   location_id integer NOT NULL,\n--   machine_id integer NOT NULL,\n--   product_id integer NOT NULL,\n--   transaction_time datetime NOT NULL,\n--   FOREIGN KEY (location_id) REFERENCES Locations (id),\n--   FOREIGN KEY (machine_id) REFERENCES Machines (id),\n--   FOREIGN KEY (product_id) REFERENCES Products (id)\n-- );\n\n-- SQLlite\nCREATE TABLE Locations (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  location_name TEXT NOT NULL,\n  total_earnings NUMERIC(9,2),\n  recent_earnings NUMERIC(9,2)\n);\n\nCREATE TABLE Machines (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  location_id INTEGER NOT NULL,\n  total_earnings NUMERIC(9,2),\n  recent_earnings NUMERIC(9,2),\n  FOREIGN KEY (location_id) REFERENCES Locations(id)\n);\n\nCREATE TABLE Products (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  cost NUMERIC(9,2) NOT NULL,\n  price NUMERIC(9,2) NOT NULL\n);\n\nCREATE TABLE Inventory (\n  machine_id INTEGER,\n  product_id INTEGER,\n  items_left INTEGER,\n  FOREIGN KEY (machine_id) REFERENCES Machines(id),\n  FOREIGN KEY (product_id) REFERENCES Products(id),\n  PRIMARY KEY (machine_id, product_id) -- Define a composite primary key\n);\n\nCREATE TABLE Transactions (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  location_id INTEGER NOT NULL,\n  machine_id INTEGER NOT NULL,\n  product_id INTEGER NOT NULL,\n  transaction_time DATETIME NOT NULL,\n  FOREIGN KEY (location_id) REFERENCES Locations(id),\n  FOREIGN KEY (machine_id) REFERENCES Machines(id),\n  FOREIGN KEY (product_id) REFERENCES Products(id)\n);\n Give me a sqlite select statement that answers the question. Only respond with sqlite syntax. If there is an error do not expalin it!",
  "questionResults": [
    {
      "question": "Which locations have the highest total earnings?",
      "sql": "SELECT location_name \nFROM Locations \nWHERE total_earnings = (SELECT MAX(total_earnings) FROM Locations);",
      "queryRawResponse": "[('New York',)]",
      "friendlyResponse": "New York has the highest total earnings.",
      "error": "None"
    },
    {
      "question": "Which machines have the highest recent earnings?",
      "sql": "SELECT * FROM Machines WHERE recent_earnings = (SELECT MAX(recent_earnings) FROM Machines);",
      "queryRawResponse": "[(1, 1, 4000, 600), (4, 3, 3500, 600)]",
      "friendlyResponse": "The machines with the highest recent earnings are machines 1 and 4.",
      "error": "None"
    },
    {
      "question": "Which products have the highest price?",
      "sql": "SELECT * FROM Products WHERE price = (SELECT MAX(price) FROM Products);",
      "queryRawResponse": "[(3, 3, 6.5)]",
      "friendlyResponse": "Product 3 has the highest price at $6.50.",
      "error": "None"
    },
    {
      "question": "Which machines have the lowest number of items left in inventory?",
      "sql": "SELECT machine_id \nFROM Inventory \nGROUP BY machine_id \nORDER BY items_left \nLIMIT 1;",
      "queryRawResponse": "[(3,)]",
      "friendlyResponse": "Machine 3 has the lowest number of items left in inventory.",
      "error": "None"
    },
    {
      "question": "Which transactions occurred in New York?",
      "sql": "SELECT * \nFROM Transactions\nJOIN Locations ON Transactions.location_id = Locations.id\nWHERE Locations.location_name = \"New York\";",
      "queryRawResponse": "[(1, 1, 1, 1, '2024-05-08 08:30:00', 1, 'New York', 10000, 1500), (2, 1, 1, 1, '2024-05-08 12:15:00', 1, 'New York', 10000, 1500)]",
      "friendlyResponse": "Two transactions occurred in New York on May 8th, 2024.",
      "error": "None"
    },
    {
      "question": "Which transactions occurred within a specific time range?",
      "sql": "SELECT *\nFROM Transactions\nWHERE transaction_time BETWEEN 'start_date_time' AND 'end_date_time';",
      "queryRawResponse": "[]",
      "friendlyResponse": "There are no transactions within the specified time range.",
      "error": "None"
    },
    {
      "question": "Which products have the highest profit margin?",
      "sql": "SELECT id, cost, price\nFROM Products\nWHERE price - cost = (SELECT MAX(price - cost) FROM Products);",
      "queryRawResponse": "[(3, 3, 6.5)]",
      "friendlyResponse": "The products with the highest profit margin are items that yield a profit margin of 6.5%.",
      "error": "None"
    },
    {
      "question": "Which machines are located in Chicago?",
      "sql": "SELECT * FROM Machines\nJOIN Locations ON Machines.location_id = Locations.id\nWHERE Locations.location_name = 'Chicago';",
      "queryRawResponse": "[(4, 3, 3500, 600, 3, 'Chicago', 9200, 1300)]",
      "friendlyResponse": "There are 3 machines located in Chicago.",
      "error": "None"
    }
  ]
}